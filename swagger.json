{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Swagger TaskPro",
    "description": "Showing off swagger-ui-express",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json", "multipart/form-data"],
  "servers": [
    { "url": "https://project-team-12-taskpro-backend.onrender.com" },
    { "url": "http://localhost:3000" }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User-related endpoints"
    },
    {
      "name": "Boards",
      "description": "Boards-related endpoints"
    },
    {
      "name": "Columns",
      "description": "Columns-related endpoints"
    },
    {
      "name": "Todos",
      "description": "Todos-related endpoints"
    },
    {
      "name": "Email",
      "description": "Email-related endpoints"
    }
  ],
  "paths": {
    "/api/users/signUp": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "409": {
            "description": "Email in use",
            "content": {}
          },
          "404": {
            "description": "Route not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/api/users/signIn": {
      "post": {
        "tags": ["Auth"],
        "summary": " Login - sign in existing user ",
        "requestBody": {
          "description": "Sign in object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Email or password is wrong",
            "content": {}
          },
          "404": {
            "description": "Route not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/api/users/signOut": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logout current user",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Get current user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignOutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignOutResponse"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Route not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Get current user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrentUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Route not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/api/users/update": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user information",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "required": false,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string"
                  },
                  "avatarURL": {
                    "type": "string",
                    "format": "url",
                    "description": "URL to user's avatar image"
                  },
                  "theme": {
                    "type": "string",
                    "enum": ["violet", "light", "dark"],
                    "description": "User's preferred theme"
                  }
                },
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Route not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "/api/users/theme": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user's theme",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateThemeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateThemeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Route not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "/api/boards/create": {
      "post": {
        "tags": ["Boards"],
        "summary": "Create a new board ownerUser",
        "parameters": [
          {
            "in": "path",
            "name": "ownerUser",
            "required": true,
            "description": "User ID"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBoardRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Board created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBoardResponse"
                }
              }
            }
          },
          "404": {
            "description": "Route not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "/api/boards/": {
      "get": {
        "tags": ["Boards"],
        "summary": "Get all boards ownerUser",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "ownerUser",
            "required": true,
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllBoardsResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "/api/boards/{boardId}": {
      "get": {
        "tags": ["Boards"],
        "summary": "Get board ownerUser by boardId",
        "parameters": [
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            },
            "description": "ID of the board to get"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OneBoardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Board not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": ["Boards"],
        "summary": "Delete board by ID",
        "parameters": [
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            },
            "description": "ID of the board to delete"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deletedBoard": {
                      "$ref": "#/components/schemas/DeleteBoardResponse"
                    },
                    "deletedColumn": {
                      "type": "object",
                      "properties": {
                        "n": {
                          "type": "number",
                          "description": "Number of columns deleted"
                        },
                        "ok": {
                          "type": "number",
                          "description": "Operation status"
                        }
                      }
                    },
                    "deletedTodo": {
                      "type": "object",
                      "properties": {
                        "n": {
                          "type": "number",
                          "description": "Number of todos deleted"
                        },
                        "ok": {
                          "type": "number",
                          "description": "Operation status"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Board not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": ["Boards"],
        "summary": "Update board by ID",
        "parameters": [
          {
            "in": "path",
            "name": "boardId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            },
            "description": "ID of the board to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBoardRequest"
              }
            }
          }
        },
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBoardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Board not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "/api/columns/create/{boardId}": {
      "post": {
        "tags": ["Columns"],
        "summary": "Create a new column",
        "parameters": [
          {
            "in": "path",
            "name": "ownerBoard",
            "required": true,
            "description": "Board ID"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Column object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateColumnRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Column created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateColumnResponse"
                }
              }
            }
          },
          "404": {
            "description": "Route not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/api/columns/{columnId}": {
      "get": {
        "tags": ["Columns"],
        "summary": "Get column by ID",
        "parameters": [
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId",
              "description": "ID of the column to get"
            },
            "description": "Column ID"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnWithTodosResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bad request",
            "content": {}
          },
          "404": {
            "description": "Column not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": ["Columns"],
        "summary": "Delete column by ID",
        "parameters": [
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            },
            "description": "ID of the column to delete"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Column deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteColumnResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Column not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": ["Columns"],
        "summary": "Update column by ID",
        "parameters": [
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            },
            "description": "ID of the column to update"
          }
        ],
        "requestBody": {
          "description": "Updated column object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateColumnRequest"
              }
            }
          }
        },
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Column updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateColumnResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Column not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },

    "/api/todos/create/{columnId}": {
      "post": {
        "tags": ["Todos"],
        "summary": "Create a new todo ownerColum",
        "parameters": [
          {
            "in": "path",
            "name": "ownerColum",
            "required": true,
            "description": "Column ID"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTodoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Todo created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTodoResponse"
                }
              }
            }
          },
          "404": {
            "description": "Route not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/api/todos/{todoId}": {
      "get": {
        "tags": ["Todos"],
        "summary": "Get todo by ID",
        "parameters": [
          {
            "in": "path",
            "name": "todoId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            },
            "description": "ID of the todo to get"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOneTodoResponse"
                }
              }
            }
          },
          "404": {
            "description": "Route not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": ["Todos"],
        "summary": "Delete todo by ID",
        "parameters": [
          {
            "in": "path",
            "name": "todoId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            },
            "description": "ID of the todo to delete"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteTodoResponse"
                }
              }
            }
          },
          "404": {
            "description": "Route not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/api/todos/update/{todoId}": {
      "patch": {
        "tags": ["Todos"],
        "summary": "Update todo by ID",
        "parameters": [
          {
            "in": "path",
            "name": "todoId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "ObjectId"
            },
            "description": "ID of the todo to update"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTodoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTodoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "404": {
            "description": "Route not found",
            "content": {}
          },
          "500": {
            "description": "Server error",
            "content": {}
          }
        }
      }
    },
    "/api/todos/{todoId}/changeOwner/{columnId}": {
      "patch": {
        "summary": "Change todo's column",
        "tags": ["Todos"],
        "parameters": [
          {
            "in": "path",
            "name": "todoId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the todo"
          },
          {
            "in": "path",
            "name": "columnId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the column"
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeСolumnTodoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Todo's column changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeСolumnTodoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Todo or column not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/need-help": {
      "post": {
        "tags": ["Email"],
        "summary": "Send email for help",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HelpRequest"
              }
            }
          }
        },
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to send email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Alex"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board's ID",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Alan"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "Djon@i.ua"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "$2b$10$pHqxYsLhQwR8Rt/FUr.bwO5KDmZhA2hcBt0EnN95reMJFJGpS2cjO"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar",
            "example": "https://res.cloudinary.com/dtgxgkg61/image/upload/v1718458854/o9u83atb…"
          },
          "theme": {
            "type": "string",
            "description": "User's theme",
            "example": "dark"
          },
          "accessToken": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1ZTM1N2QxNzNmMTBkYzY0NTJhM2UzZCIsImlhdCI6MTY0NDA4MTg3Niwic3ViIjoiZnVsbHN0YWNrIiwiaWF0IjoxNjQ0MDgxODc2LCJleHAiOjE2NDQwODIwNzZ9.Ra2vL8ZJ5qV9_c9ABYHAmhGBkzvDe7oaw3vt3SD7XfI"
          },
          "refreshToken": {
            "type": "string",
            "description": "User's refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1ZTM1N2QxNzNmMTBkYzY0NTJhM2UzZCIsImlhdCI6MTY0NDA4MTg3Niwic3ViIjoiZnVsbHN0YWNrIiwiaWF0IjoxNjQ0MDgxODc2LCJleHAiOjE2NDQwODIwNzZ9.Ra2vL8ZJ5qV9_c9ABYHAmhGBkzvDe7oaw3vt3SD7XfI"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board's ID",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Alan"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "Djon@i.ua"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "$2b$10$pHqxYsLhQwR8Rt/FUr.bwO5KDmZhA2hcBt0EnN95reMJFJGpS2cjO"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar",
            "example": "https://res.cloudinary.com/dtgxgkg61/image/upload/v1718458854/o9u83atb…"
          },
          "theme": {
            "type": "string",
            "description": "User's theme",
            "example": "dark"
          },
          "accessToken": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1ZTM1N2QxNzNmMTBkYzY0NTJhM2UzZCIsImlhdCI6MTY0NDA4MTg3Niwic3ViIjoiZnVsbHN0YWNrIiwiaWF0IjoxNjQ0MDgxODc2LCJleHAiOjE2NDQwODIwNzZ9.Ra2vL8ZJ5qV9_c9ABYHAmhGBkzvDe7oaw3vt3SD7XfI"
          },
          "refreshToken": {
            "type": "string",
            "description": "User's refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1ZTM1N2QxNzNmMTBkYzY0NTJhM2UzZCIsImlhdCI6MTY0NDA4MTg3Niwic3ViIjoiZnVsbHN0YWNrIiwiaWF0IjoxNjQ0MDgxODc2LCJleHAiOjE2NDQwODIwNzZ9.Ra2vL8ZJ5qV9_c9ABYHAmhGBkzvDe7oaw3vt3SD7XfI"
          }
        }
      },
      "SignOutRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "SignOutResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board's ID",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Alan"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "Djon@i.ua"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "$2b$10$pHqxYsLhQwR8Rt/FUr.bwO5KDmZhA2hcBt0EnN95reMJFJGpS2cjO"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar",
            "example": "https://res.cloudinary.com/dtgxgkg61/image/upload/v1718458854/o9u83atb…"
          },
          "theme": {
            "type": "string",
            "description": "User's theme",
            "example": "dark"
          },
          "accessToken": {
            "type": "string",
            "description": "User's token",
            "example": ""
          },
          "refreshToken": {
            "type": "string",
            "description": "User's refresh token",
            "example": ""
          }
        }
      },
      "CurrentUserRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "CurrentUserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "User's ID",
                "example": "65e4d4c9a170149137efc153"
              },
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "John Doe"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "user@example.com"
              },
              "avatarURL": {
                "type": "string",
                "description": "URL to user's avatar image",
                "example": "//www.gravatar.com/avatar/b58996c504c5638798eb6b511e6f49af"
              },
              "theme": {
                "type": "string",
                "description": "User's preferred theme",
                "example": "light"
              }
            }
          },
          "boards": { "type": "array" }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          },
          "avatarURL": {
            "type": "string",
            "format": "url",
            "description": "URL to user's avatar image"
          },
          "theme": {
            "type": "string",
            "enum": ["violet", "light", "dark"],
            "description": "User's preferred theme"
          }
        }
      },
      "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board's ID",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Alan"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "Djon@i.ua"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "$2b$10$pHqxYsLhQwR8Rt/FUr.bwO5KDmZhA2hcBt0EnN95reMJFJGpS2cjO"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar",
            "example": "https://res.cloudinary.com/dtgxgkg61/image/upload/v1718458854/o9u83atb…"
          },
          "theme": {
            "type": "string",
            "description": "User's theme",
            "example": "dark"
          },
          "accessToken": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1ZTM1N2QxNzNmMTBkYzY0NTJhM2UzZCIsImlhdCI6MTY0NDA4MTg3Niwic3ViIjoiZnVsbHN0YWNrIiwiaWF0IjoxNjQ0MDgxODc2LCJleHAiOjE2NDQwODIwNzZ9.Ra2vL8ZJ5qV9_c9ABYHAmhGBkzvDe7oaw3vt3SD7XfI"
          },
          "refreshToken": {
            "type": "string",
            "description": "User's refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1ZTM1N2QxNzNmMTBkYzY0NTJhM2UzZCIsImlhdCI6MTY0NDA4MTg3Niwic3ViIjoiZnVsbHN0YWNrIiwiaWF0IjoxNjQ0MDgxODc2LCJleHAiOjE2NDQwODIwNzZ9.Ra2vL8ZJ5qV9_c9ABYHAmhGBkzvDe7oaw3vt3SD7XfI"
          }
        }
      },
      "UpdateThemeRequest": {
        "type": "object",
        "properties": {
          "theme": {
            "type": "string",
            "enum": ["violet", "light", "dark"],
            "description": "User's preferred theme"
          }
        }
      },

      "UpdateThemeResponse": {
        "type": "object",
        "properties": {
          "theme": {
            "type": "string",
            "enum": ["violet", "light", "dark"],
            "description": "User's preferred theme"
          }
        }
      },

      "CreateBoardRequest": {
        "type": "object",
        "required": ["title", "icon", "background"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Board's title"
          },
          "icon": {
            "type": "string",
            "description": "URL to board's icon image"
          },
          "background": {
            "type": "string",
            "description": "URL to board's background image"
          }
        }
      },
      "CreateBoardResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board's ID",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "title": {
            "type": "string",
            "description": "Board's title",
            "example": "Project X"
          },
          "icon": {
            "type": "string",
            "description": "URL to board's icon image",
            "example": "https://example.com/icons/project_x.png"
          },
          "background": {
            "type": "string",
            "description": "URL to board's background image",
            "example": "https://example.com/backgrounds/project_x.jpg"
          },
          "ownerUser": {
            "type": "string",
            "description": "Owner's user ID",
            "example": "611af8bfe7b6b918a8319b27"
          }
        }
      },

      "AllBoardsResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board's ID",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "title": {
            "type": "string",
            "description": "Board's title",
            "example": "Project X"
          },
          "icon": {
            "type": "string",
            "description": "URL to board's icon image",
            "example": "https://example.com/icons/project_x.png"
          },
          "background": {
            "type": "string",
            "description": "URL to board's background image",
            "example": "https://example.com/backgrounds/project_x.jpg"
          },
          "ownerUser": {
            "type": "string",
            "description": "Owner's user ID",
            "example": "611af8bfe7b6b918a8319b27"
          }
        } 
      },

      "OneBoardResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board's ID",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "title": {
            "type": "string",
            "description": "Board's title",
            "example": "Project X"
          },
          "icon": {
            "type": "string",
            "description": "URL to board's icon image",
            "example": "https://example.com/icons/project_x.png"
          },
          "background": {
            "type": "string",
            "description": "URL to board's background image",
            "example": "https://example.com/backgrounds/project_x.jpg"
          },
          "ownerUser": {
            "type": "string",
            "description": "Owner's user ID",
            "example": "611af8bfe7b6b918a8319b27"
          }
        }
      },

      "DeleteBoardResponse": {
        "type": "object",
        "properties": {
          "deletedBoard": {
            "$ref": "#/components/schemas/Board"
          },
          "deletedColumns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          },
          "deletedTodos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Todo"
            }
          }
        }
      },
      "Board": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board's ID"
          },
          "title": {
            "type": "string",
            "description": "Board's title"
          },
          "icon": {
            "type": "string",
            "description": "URL to board's icon image"
          },
          "background": {
            "type": "string",
            "description": "URL to board's background image"
          },
          "ownerUser": {
            "type": "string",
            "description": "Owner's user ID",
            "example": "611af8bfe7b6b918a8319b27"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Board creation date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date the board was last updated"
          }
        },
        "example": {
          "board": {
            "_id": "65e7323795f66d6990d1272e",
            "title": "My tasks",
            "icon": "https://example.com/icons/board_icon.png",
            "background": "https://example.com/backgrounds/board_background.jpg",
            "ownerUser": "65e4e00580d9b47fb7b71a93",
            "createdAt": "2024-03-05T14:54:47.187Z",
            "updatedAt": "2024-03-05T14:54:47.187Z"
          },
          "columns": []
        }
      },

      "UpdateBoardRequest": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board's ID",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "title": {
            "type": "string",
            "description": "Board's title",
            "example": "Project X"
          },
          "icon": {
            "type": "string",
            "description": "URL to board's icon image",
            "example": "https://example.com/icons/project_x.png"
          },
          "background": {
            "type": "string",
            "description": "URL to board's background image",
            "example": "https://example.com/backgrounds/project_x.jpg"
          },
          "ownerUser": {
            "type": "string",
            "description": "Owner's user ID",
            "example": "611af8bfe7b6b918a8319b27"
          }
        }
      },
      "UpdateBoardResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board's ID",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "title": {
            "type": "string",
            "description": "Board's title",
            "example": "Project Y"
          },
          "icon": {
            "type": "string",
            "description": "URL to board's icon image",
            "example": "https://example.com/icons/project_x.png"
          },
          "background": {
            "type": "string",
            "description": "URL to board's background image",
            "example": "https://example.com/backgrounds/project_x.jpg"
          },
          "ownerUser": {
            "type": "string",
            "description": "Owner's user ID",
            "example": "611af8bfe7b6b918a8319b27"
          }
        }
      },

      "Column": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID of the column"
          },
          "title": {
            "type": "string",
            "description": "Title of the column"
          },
          "ownerBoard": {
            "type": "string",
            "description": "ID of the board to which the column belongs"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the column was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the column was last updated"
          }
        },
        "example": {
          "column": {
            "_id": "65e7323795f66d6990d1272e",
            "title": "In Progress",
            "ownerBoard": "65e4e00580d9b47fb7b71a93",
            "createdAt": "2024-03-05T14:54:47.187Z",
            "updatedAt": "2024-03-05T14:54:47.187Z"
          },
          "todos": []
        }
      },

      "CreateColumnRequest": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the column",
            "example": "In Progress"
          }
        }
      },
      "CreateColumnResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Column's ID",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "title": {
            "type": "string",
            "description": "Title of the column",
            "example": "In Progress"
          },
          "ownerBoard": {
            "type": "string",
            "description": "Owner's board ID",
            "example": "666b4da0b78ce34aec99eb54"
          }
        }
      },

      "ColumnWithTodosResponse": {
        "type": "object",
        "properties": {
          "column": {
            "$ref": "#/components/schemas/Column"
          },
          "todos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Todo"
            }
          }
        }
      },

      "DeleteColumnResponse": {
        "type": "object",
        "properties": {
          "deletedColumn": {
            "$ref": "#/components/schemas/Column"
          },
          "deletedTodos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Todo"
            }
          }
        }
      },

      "UpdateColumnRequest": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "description": "New title of the column",
            "example": "New Title"
          },
          "ownerBoard": {
            "type": "string",
            "description": "Owner's board ID",
            "example": "666b4da0b78ce34aec99eb54"
          }
        }
      },
      "UpdateColumnResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "ID of the column",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "title": {
            "type": "string",
            "description": "New title of the column",
            "example": "New Title"
          },
          "ownerBoard": {
            "type": "string",
            "description": "Owner's board ID",
            "example": "666b4da0b78ce34aec99eb54"
          }
        }
      },

      "Todo": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Todo identifier"
          },
          "title": {
            "type": "string",
            "description": "Todo title"
          },
          "description": {
            "type": "string",
            "description": "Todo description"
          },
          "priority": {
            "type": "string",
            "enum": ["Without priority", "Low", "Medium", "High"],
            "description": "Todo priority"
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "description": "Todo deadline"
          },
          "ownerColumn": {
            "type": "string",
            "description": "ID of the column to which the todo belongs"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the todo was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the todo was last updated"
          }
        },
        "example": {
          "todo": {
            "_id": "65e7323795f66d6990d1272e",
            "title": "Finish project report",
            "description": "Write the conclusion section",
            "priority": "Low",
            "deadline": "2024-06-18",
            "ownerColumn": "65e4e00580d9b47fb7b71a93",
            "createdAt": "2024-03-05T14:54:47.187Z",
            "updatedAt": "2024-03-05T14:54:47.187Z"
          }
        }
      },
      "CreateTodoRequest": {
        "type": "object",
        "required": ["title", "priority", "deadline"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the todo",
            "maxLength": 30
          },
          "description": {
            "type": "string",
            "description": "Description of the todo",
            "maxLength": 300
          },
          "priority": {
            "type": "string",
            "description": "Priority of the todo",
            "enum": ["Without priority", "Low", "Medium", "High"],
            "default": "Without priority"
          },
          "deadline": {
            "type": "string",
            "format": "date",
            "description": "Deadline for the todo"
          }
        },
        "example": {
          "title": "Complete assignment",
          "description": "Finish the project assignment",
          "priority": "High",
          "deadline": "2024-03-04"
        }
      },
      "CreateTodoResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Todo's ID",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "title": {
            "type": "string",
            "description": "Title of the todo",
            "example": "Complete assignment"
          },
          "description": {
            "type": "string",
            "description": "Description of the todo",
            "example": "Finish the project assignment"
          },
          "priority": {
            "type": "string",
            "description": "Priority of the todo",
            "enum": ["Without priority", "Low", "Medium", "High"],
            "default": "Without priority",
            "example": "Low"
          },
          "deadline": {
            "type": "string",
            "format": "date",
            "description": "Deadline for the todo",
            "example": "2024-06-18"
          },
          "ownerColumn": {
            "type": "string",
            "description": "Owner's board ID",
            "example": "'666b650246b96750d5374535"
          }
        },
        "UpdateTodoRequest": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "example": "Update title"
            },
            "description": {
              "type": "string",
              "example": "Update description"
            },
            "priority": {
              "type": "string",
              "enum": ["Without priority", "Low", "Medium", "High"],
              "example": "High"
            },
            "deadline": {
              "type": "string",
              "format": "date-time",
              "example": "2024-03-04T12:00:00Z"
            }
          }
        },
        "HelpRequest": {
          "type": "object",
          "required": ["email", "message"],
          "properties": {
            "email": {
              "type": "string",
              "format": "email"
            },
            "message": {
              "type": "string"
            }
          }
        }
      },
      "GetOneTodoResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Delete todo's ID",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "title": {
            "type": "string",
            "description": "Title of the todo"
          },
          "description": {
            "type": "string",
            "description": "Description of the todo"
          },
          "priority": {
            "type": "string",
            "description": "Priority of the todo",
            "enum": ["Without priority", "Low", "Medium", "High"],
            "default": "Without priority"
          },
          "deadline": {
            "type": "string",
            "format": "date",
            "description": "Deadline for the todo"
          },
          "ownerColumn": {
            "type": "string",
            "description": "Owner's board ID",
            "example": "'666b650246b96750d5374535"
          }
        }
      },
      "DeleteTodoResponse": {
        "type": "object",
        "properties": {
          "deletedTodo": {
            "$ref": "#/components/schemas/Todo"
          }
        }
      },
      "UpdateTodoRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the todo"
          },
          "description": {
            "type": "string",
            "description": "Description of the todo"
          },
          "priority": {
            "type": "string",
            "description": "Priority of the todo",
            "enum": ["Without priority", "Low", "Medium", "High"],
            "default": "Without priority"
          },
          "deadline": {
            "type": "string",
            "format": "date",
            "description": "Deadline for the todo"
          },
          "ownerColumn": {
            "type": "string",
            "description": "Owner's board ID",
            "example": "'666b650246b96750d5374535"
          }
        }
      },
      "UpdateTodoResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Delete todo's ID",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "title": {
            "type": "string",
            "description": "Title of the todo"
          },
          "description": {
            "type": "string",
            "description": "Description of the todo"
          },
          "priority": {
            "type": "string",
            "description": "Priority of the todo",
            "enum": ["Without priority", "Low", "Medium", "High"],
            "default": "Without priority"
          },
          "deadline": {
            "type": "string",
            "format": "date",
            "description": "Deadline for the todo"
          },
          "ownerColumn": {
            "type": "string",
            "description": "Owner's board ID",
            "example": "'666b650246b96750d5374535"
          }
        }
      },
      "ChangeСolumnTodoRequest": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Delete todo's ID",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "title": {
            "type": "string",
            "description": "Title of the todo",
            "example": "Complete assignment"
          },
          "description": {
            "type": "string",
            "description": "Description of the todo",
            "example": "Finish the project assignment"
          },
          "priority": {
            "type": "string",
            "description": "Priority of the todo",
            "enum": ["Without priority", "Low", "Medium", "High"],
            "default": "Without priority",
            "example": "Low"
          },
          "deadline": {
            "type": "string",
            "format": "date",
            "description": "Deadline for the todo",
            "example": "2024-06-18"
          },
          "ownerColumn": {
            "type": "string",
            "description": "Owner's board ID",
            "example": "0000000000000000000001"
          }
        }
      },
      "ChangeСolumnTodoResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Delete todo's ID",
            "example": "611af8bfe7b6b918a8319b26"
          },
          "title": {
            "type": "string",
            "description": "Title of the todo",
            "example": "Complete assignment"
          },
          "description": {
            "type": "string",
            "description": "Description of the todo",
            "example": "Finish the project assignment"
          },
          "priority": {
            "type": "string",
            "description": "Priority of the todo",
            "enum": ["Without priority", "Low", "Medium", "High"],
            "default": "Without priority",
            "example": "Low"
          },
          "deadline": {
            "type": "string",
            "format": "date",
            "description": "Deadline for the todo",
            "example": "2024-06-18"
          },
          "ownerColumn": {
            "type": "string",
            "description": "Owner's board ID",
            "example": "0000000000000000000002"
          }
        }
      },

      "HelpRequest": {
        "type": "object",
        "required": ["email", "message"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },

    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
