import Column from "../models/columnModel.js";

import { createColumnSchema } from "../schemas/columnSchema.js";

// Логіка пов'язана з контроллерами колонок:

// createColumn: Створює нову колонку для дошки та повертає її у відповіді.
// 1. Отримує ідентифікатор дошки з параметрів запиту.
// 2. Викликає сервіс для додавання нової колонки з даними з тіла запиту та ідентифікатором дошки.
// 3. Відповідає з статусом 201 та новоствореною колонкою.

export const createColumn = async (req, res) => {
  // ...
};

// getById: Отримує колонку за ідентифікатором, а також всі задачі, пов'язані з цією колонкою, та повертає їх у відповіді.
// 1. Отримує ідентифікатор колонки з параметрів запиту.
// 2. Викликає сервіс для отримання колонки за ідентифікатором.
// 3. Шукає всі задачі, пов'язані з колонкою.
// 4. Відповідає з статусом 200 та знайденою колонкою і задачами.

export const getById = async (req, res) => {
  // ...
};

// deleteColumn: Видаляє колонку за ідентифікатором разом з усіма пов'язаними задачами та повертає видалені об'єкти у відповіді.
// 1. Отримує ідентифікатор колонки з параметрів запиту.
// 2. Викликає сервіс для видалення колонки за ідентифікатором.
// 3. Шукає всі задачі, пов'язані з колонкою.
// 4. Якщо задач немає, відповідає з видаленою колонкою.
// 5. Видаляє всі задачі, пов'язані з колонкою.
// 6. Відповідає з видаленою колонкою та задачами.

export const deleteColumn = async (req, res) => {
  // ...
};

// updateColumn: Оновлює поточну колонку за ідентифікатором та повертає оновлену колонку у відповіді.
// 1. Отримує ідентифікатор колонки з параметрів запиту.
// 2. Викликає сервіс для оновлення колонки за ідентифікатором та даними з тіла запиту.
// 3. Відповідає з статусом 200 та оновленою колонкою.

export const updateColumn = async (req, res) => {
  // ...
};
